name: Simple CI/CD

# When to run: when you push code to main branch
on:
  push:
    branches: [ main ]

jobs:
  # Step 1: Test the code
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    - run: pip install -r requirements.txt
    - run: pytest test_app.py -v

  # Step 2: Build and push to Docker Hub
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest .
      
    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest

  # Step 3: Deploy to EC2
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        # Save SSH key to file
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        
        # Deploy on EC2
        ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOSTNAME} << 'EOF'
          # Pull latest image from Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest
          
          # Stop and remove old container
          docker stop my-python-app || true
          docker rm my-python-app || true
          
          # Start new container with latest image
          docker run -d --name my-python-app -p 80:5000 --restart unless-stopped ${{ secrets.DOCKER_USERNAME }}/my-python-app:latest
          
          # Clean up old images
          docker image prune -f
        EOF

    # Step 4: Test deployment
    - name: Test deployment
      env:
        HOSTNAME: ${{ secrets.EC2_HOST }}
      run: |
        sleep 15
        curl -f http://${HOSTNAME}/api/health || echo "Health check failed but continuing..."